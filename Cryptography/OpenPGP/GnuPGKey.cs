/*
 *  Authors:  Benton Stark
 * 
 *  Copyright (c) 2007-2012 Starksoft, LLC (http://www.starksoft.com) 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */


using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;

namespace Starksoft.Cryptography.OpenPGP
{
    /// <summary>
    /// Class structure that proves a read-only view of the GnuPG keys. 
    /// </summary>
    public class GnuPGKey
    {
        private string _keyId;
        private DateTime _creationDate;
        private DateTime? _keyExpiration;
        private string _userId;
        private string _userName;
        private string _raw;
        private GnuPGKeyType _keyType;
        private GnuPGAlgorithmType _algorithm;
        private uint _keyLength = 0;
        private List<GnuPGKey> _subKeys;

        /// <summary>
        /// GnuPGKey constructor.
        /// </summary>
        /// <param name="raw">Raw output stream text data containing key information.</param>
        public GnuPGKey(string raw)
        {
            _subKeys = new List<GnuPGKey>();
            _raw = raw;
            ParseRaw();
        }

        /// <summary>
        /// Key ID information.
        /// </summary>
        public string KeyID
        {
            get { return _keyId; }
        }

        /// <summary>
        /// Date and time of key creation
        /// </summary>
        public DateTime CreationDate
        {
            get { return _creationDate; }
        }

        /// <summary>
        /// Key expiration date and time.
        /// </summary>
        public DateTime? KeyExpiration
        {
            get { return _keyExpiration; }
        }

        /// <summary>
        /// Key length (bits)
        /// </summary>
        public uint KeyLength
        {
            get { return _keyLength; }
        }

        /// <summary>
        /// Key user identification.
        /// </summary>
        public string UserId
        {
            get { return _userId; }
        }

        /// <summary>
        /// Key user name.
        /// </summary>
        public string UserName
        {
            get { return _userName; }
        }

        public List<GnuPGKey> SubKeys
        {
            // Return a list copy so recipient can't change our list
            get { return new List<GnuPGKey>(_subKeys); }
        }

        /// <summary>
        /// Key type (Public or Secret)
        /// </summary>
        public GnuPGKeyType KeyType
        {
            get { return _keyType; }
        }

        public GnuPGAlgorithmType Algorithm
        {
            get { return _algorithm; }
        }

        /// <summary>
        /// Raw output key text generated by GPG.EXE.
        /// </summary>
        public string Raw
        {
            get { return _raw; }
        }

        //sec   1024D/543C3595 2006-12-10
        //uid                  Benton Stark <benton@starksoft.com>
        //uid       ...
        //ssb   1024g/42A71AD8 2006-12-10
        //
        //pub   1024D/543C3595 2006-12-10 [expires: 2015-08-18]
        //uid                  Benton Stark <benton@starksoft.com>
        //uid       ...
        //uid       ...
        //sub   1024g/42A71AD8 2006-12-10   
        //
        //pub   1024D/543C3595 2006-12-10
        //uid                  Benton Stark <benton@starksoft.com>
        //uid       ...
        
        private void ParseRaw()
        {
            string[] lines = _raw.Split(new char[] { '\r', '\n' }, 
                            StringSplitOptions.RemoveEmptyEntries);
            foreach (string line in lines)
            {
                string[] fields = SplitSpaces(line);
                switch (fields[0])
                {
                    case "pub":
                        ParseKeyFields(fields);
                        _keyType = GnuPGKeyType.Public;
                        break;
                    case "uid":
                        ParseUid(line);
                        break;
                    case "sec":
                        ParseKeyFields(fields);
                        _keyType = GnuPGKeyType.Secret;
                        break;
                    case "sub":
                    case "ssb":
                        // From the subkey's perspective, sub is the pub part, ssb is the sec part
                        string alteredLine = line.Replace("sub", "pub");
                        alteredLine = alteredLine.Replace("ssb", "sec");
                        GnuPGKey newSubKey = new GnuPGKey(alteredLine);
                        _subKeys.Add(newSubKey);
                        break;
                    default:
                        break;
                }
            }
        }

        private void ParseKeyFields(string[] fields)
        {
            _keyId = fields[1];
            string[] keyFields = fields[1].Split('/');
            _keyLength = Convert.ToUInt16(keyFields[0].Substring(0, keyFields[0].Length - 1));
            _algorithm = ParseAlgorithm(keyFields[0].Substring(keyFields[0].Length - 1));
            _keyId = keyFields[1];
            _creationDate = DateTime.Parse(fields[2]);
            if (fields.Length > 4 && fields[3] == "[expires")
            {
                _keyExpiration = DateTime.Parse(fields[4].Substring(0, fields[4].Length - 1));
            }
        }

        // Parse the algorithm from the letter code
        private GnuPGAlgorithmType ParseAlgorithm(string letterCode)
        {
            switch (letterCode)
            {
                case "R":
                    return GnuPGAlgorithmType.RSA;
                default:
                    return GnuPGAlgorithmType.Unknown;
            }
        }

        private string[] SplitSpaces(string input)
        {
            char[] splitChar = { ' '};
            return input.Split(splitChar, StringSplitOptions.RemoveEmptyEntries);
        }
     
        private void ParseUid(string uid)
        {
            Regex name = new Regex(@"(?<=uid).*(?=<)");
            Regex userId = new Regex(@"(?<=<).*(?=>)");

            _userName = name.Match(uid).ToString().Trim();
            _userId = userId.Match(uid).ToString();
        }

    }
}
