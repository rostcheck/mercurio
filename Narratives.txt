Narrative:
- A user opens the application for the first time. The user has no key ring
- The application looks for any configured key rings
- If there were any, they woud be in its application data file, stored with the path to the keyring and the crypto provider to use to read them.
- One would be marked as default
- It lists all the keyrings it finds
- It then asks the user to create a new one, or add an existing one, or continue with one

From there, we drop into menu mode.

Menu commands include:
- help
- show queues
- create queues


Mercurio is but around collections of replicated items

Domain Ubiquitous Language:

- Atomic data element - a basic data element with a Name, Value, and Type (string, integrer, or binary data)
- Record - an unique association of atomic data elements. Each Record contains a chain of Revisions.
- Revision - a change to a Record. Revisions are immutable; changing a Record produces a new Revision.
- Document - a single computer file (ex. sound file, word processor file) that we treat as a single integral Record
- Container - a collection of Records
- User - a person who uses Mercurio. A user may have multiple Identities
- Identity - a unique cryptographic key. Contains a Public Part and a Private Part. 
- Change - an access permission that allows the specified Identity to change Records (add Revisions to) a Container
- Add - an access permission that allows the specified Identity to add Records to a Container
- Delete - an access permission that allows the specified Identity to delete Records from a Container
- Address - information (a special type of Record) used to deliver other Records to an Identity
- Access - the level of control an Identity has over a Container (Read, Write)


A User can create, edit, and delete Identities. 
A User may select an active Identity to operate as.
An Identity can create or delete Containers.
An Identity can share a container with other Identities (must specify the Address and the Identity's public part)
An Identity can add a new Record to a Container, delete an existing Record from the Container, or change a Record.
Changing a Record creates a new Revision of the Record in the Container.

A Container also contains Policies that determine how Revisions are handled:
A Revision Retention Policy specifies whether old revisions are retained, and if so how many. 
  Possible Revision Retention Policies include None, All, and a specific number.
A Change Policy specifies which Identities can change Records in the Container. Example Change Policies
  include: Allow All or a list of specific Identities
A Delete Policy specifies which Identities can delete Records in the Container. Example Delete Policies 
  include: Allow All, a list of specific Identities, or None
There is no policy needed to view Records within a Container because only Identities with whom the
  Container has been shared actually ever have those records. Mercurio insures this cryptographically.
A Revision Conflict Policy specifies what happens when multiple Identities have changed the same Revision
  of the same Record. Possible solutions include: Earliest Wins or Merge Changes.